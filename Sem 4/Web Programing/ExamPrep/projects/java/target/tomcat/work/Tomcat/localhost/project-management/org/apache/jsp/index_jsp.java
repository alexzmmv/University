/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2025-06-18 09:14:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    <title>Project Management System - Java Servlets</title>\n");
      out.write("    <style>\n");
      out.write("        body {\n");
      out.write("            font-family: Arial, sans-serif;\n");
      out.write("            max-width: 1200px;\n");
      out.write("            margin: 0 auto;\n");
      out.write("            padding: 20px;\n");
      out.write("            background-color: #f5f5f5;\n");
      out.write("        }\n");
      out.write("        .container {\n");
      out.write("            background-color: white;\n");
      out.write("            padding: 30px;\n");
      out.write("            border-radius: 10px;\n");
      out.write("            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n");
      out.write("        }\n");
      out.write("        .header {\n");
      out.write("            text-align: center;\n");
      out.write("            margin-bottom: 30px;\n");
      out.write("            color: #333;\n");
      out.write("        }\n");
      out.write("        .tech-badge {\n");
      out.write("            background-color: #007396;\n");
      out.write("            color: white;\n");
      out.write("            padding: 5px 15px;\n");
      out.write("            border-radius: 20px;\n");
      out.write("            font-size: 14px;\n");
      out.write("            margin-left: 10px;\n");
      out.write("        }\n");
      out.write("        .user-section {\n");
      out.write("            background-color: #e8f4f8;\n");
      out.write("            padding: 20px;\n");
      out.write("            border-radius: 8px;\n");
      out.write("            margin-bottom: 30px;\n");
      out.write("        }\n");
      out.write("        .section {\n");
      out.write("            margin-bottom: 30px;\n");
      out.write("            padding: 20px;\n");
      out.write("            border: 1px solid #ddd;\n");
      out.write("            border-radius: 8px;\n");
      out.write("        }\n");
      out.write("        .section h3 {\n");
      out.write("            color: #2c3e50;\n");
      out.write("            border-bottom: 2px solid #3498db;\n");
      out.write("            padding-bottom: 10px;\n");
      out.write("        }\n");
      out.write("        input[type=\"text\"], select, textarea {\n");
      out.write("            width: 100%;\n");
      out.write("            padding: 10px;\n");
      out.write("            margin: 5px 0 15px 0;\n");
      out.write("            border: 1px solid #ddd;\n");
      out.write("            border-radius: 4px;\n");
      out.write("            box-sizing: border-box;\n");
      out.write("        }\n");
      out.write("        button {\n");
      out.write("            background-color: #3498db;\n");
      out.write("            color: white;\n");
      out.write("            padding: 12px 20px;\n");
      out.write("            border: none;\n");
      out.write("            border-radius: 4px;\n");
      out.write("            cursor: pointer;\n");
      out.write("            margin: 5px;\n");
      out.write("        }\n");
      out.write("        button:hover {\n");
      out.write("            background-color: #2980b9;\n");
      out.write("        }\n");
      out.write("        .projects-grid, .developers-grid {\n");
      out.write("            display: grid;\n");
      out.write("            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n");
      out.write("            gap: 20px;\n");
      out.write("            margin-top: 20px;\n");
      out.write("        }\n");
      out.write("        .project-card, .developer-card {\n");
      out.write("            border: 1px solid #ddd;\n");
      out.write("            padding: 15px;\n");
      out.write("            border-radius: 8px;\n");
      out.write("            background-color: #f9f9f9;\n");
      out.write("        }\n");
      out.write("        .project-card h4, .developer-card h4 {\n");
      out.write("            margin-top: 0;\n");
      out.write("            color: #2c3e50;\n");
      out.write("        }\n");
      out.write("        .user-projects {\n");
      out.write("            background-color: #e8f5e8;\n");
      out.write("        }\n");
      out.write("        .assign-section {\n");
      out.write("            background-color: #fff3cd;\n");
      out.write("        }\n");
      out.write("        .filter-section {\n");
      out.write("            background-color: #f8d7da;\n");
      out.write("        }\n");
      out.write("        .hidden {\n");
      out.write("            display: none;\n");
      out.write("        }\n");
      out.write("        .current-user {\n");
      out.write("            font-weight: bold;\n");
      out.write("            color: #e74c3c;\n");
      out.write("        }\n");
      out.write("        ul {\n");
      out.write("            margin: 10px 0;\n");
      out.write("            padding-left: 20px;\n");
      out.write("        }\n");
      out.write("        .checkbox-group {\n");
      out.write("            max-height: 200px;\n");
      out.write("            overflow-y: auto;\n");
      out.write("            border: 1px solid #ddd;\n");
      out.write("            padding: 10px;\n");
      out.write("            margin: 10px 0;\n");
      out.write("        }\n");
      out.write("        .checkbox-item {\n");
      out.write("            margin: 5px 0;\n");
      out.write("        }\n");
      out.write("        .setup-link {\n");
      out.write("            background-color: #e74c3c;\n");
      out.write("            color: white;\n");
      out.write("            padding: 10px 20px;\n");
      out.write("            text-decoration: none;\n");
      out.write("            border-radius: 4px;\n");
      out.write("            display: inline-block;\n");
      out.write("            margin-bottom: 20px;\n");
      out.write("        }\n");
      out.write("        .setup-link:hover {\n");
      out.write("            background-color: #c0392b;\n");
      out.write("            color: white;\n");
      out.write("            text-decoration: none;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <div class=\"container\">\n");
      out.write("        <div class=\"header\">\n");
      out.write("            <h1>🚀 Project Management System</h1>\n");
      out.write("            <span class=\"tech-badge\">Java Servlets + Tomcat</span>\n");
      out.write("            <p>Manage software developers and projects efficiently</p>\n");
      out.write("            \n");
      out.write("            <!-- Database Setup Link -->\n");
      out.write("            <div style=\"margin: 20px 0;\">\n");
      out.write("                <a href=\"setup-database\" class=\"setup-link\">🔧 Setup Database First</a>\n");
      out.write("                <p style=\"font-size: 14px; color: #666;\">Click above to create database tables and sample data</p>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        <!-- User Login Section -->\n");
      out.write("        <div class=\"user-section\">\n");
      out.write("            <h3>👤 User Login</h3>\n");
      out.write("            <input type=\"text\" id=\"username\" placeholder=\"Enter your name to start using the application\">\n");
      out.write("            <button onclick=\"setUser()\">Set Current User</button>\n");
      out.write("            <div id=\"currentUser\" class=\"hidden\">\n");
      out.write("                <p>Current User: <span id=\"currentUserName\" class=\"current-user\"></span></p>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        <!-- All Projects Section -->\n");
      out.write("        <div class=\"section\">\n");
      out.write("            <h3>📋 All Projects in Database</h3>\n");
      out.write("            <button onclick=\"loadAllProjects()\">Display All Projects</button>\n");
      out.write("            <div id=\"allProjects\" class=\"projects-grid\"></div>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        <!-- User Projects Section -->\n");
      out.write("        <div class=\"section user-projects\">\n");
      out.write("            <h3>🔍 My Projects</h3>\n");
      out.write("            <button onclick=\"loadUserProjects()\" id=\"loadUserProjectsBtn\" disabled>Load My Projects</button>\n");
      out.write("            <div id=\"userProjects\"></div>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        <!-- Assign Developer Section -->\n");
      out.write("        <div class=\"section assign-section\">\n");
      out.write("            <h3>➕ Assign Developer to Projects</h3>\n");
      out.write("            <input type=\"text\" id=\"developerName\" placeholder=\"Developer name to assign\">\n");
      out.write("            <p>Select projects to assign the developer to:</p>\n");
      out.write("            <div id=\"projectsList\" class=\"checkbox-group\"></div>\n");
      out.write("            <input type=\"text\" id=\"newProjectName\" placeholder=\"Or enter new project name\">\n");
      out.write("            <button onclick=\"assignDeveloper()\">Assign Developer to Selected Projects</button>\n");
      out.write("            <div id=\"assignResult\"></div>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        <!-- All Developers Section -->\n");
      out.write("        <div class=\"section filter-section\">\n");
      out.write("            <h3>👥 All Software Developers</h3>\n");
      out.write("            <button onclick=\"loadAllDevelopers()\">Display All Developers</button>\n");
      out.write("            <div style=\"margin: 20px 0;\">\n");
      out.write("                <input type=\"text\" id=\"skillFilter\" placeholder=\"Enter skill to filter (e.g., Java, PHP, Python)\">\n");
      out.write("                <button onclick=\"filterDevelopersBySkill()\">Filter by Skill</button>\n");
      out.write("                <button onclick=\"showAllDevelopers()\">Show All</button>\n");
      out.write("            </div>\n");
      out.write("            <div id=\"allDevelopers\" class=\"developers-grid\"></div>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <script>\n");
      out.write("        let currentUser = '';\n");
      out.write("        let allProjectsData = [];\n");
      out.write("        let allDevelopersData = [];\n");
      out.write("        \n");
      out.write("        // Base URL for API calls - use relative path to avoid CORS issues\n");
      out.write("        const API_BASE = '");
      out.print( request.getContextPath() );
      out.write("/api';\n");
      out.write("\n");
      out.write("        function setUser() {\n");
      out.write("            const username = document.getElementById('username').value.trim();\n");
      out.write("            if (username) {\n");
      out.write("                currentUser = username;\n");
      out.write("                document.getElementById('currentUserName').textContent = username;\n");
      out.write("                document.getElementById('currentUser').classList.remove('hidden');\n");
      out.write("                document.getElementById('loadUserProjectsBtn').disabled = false;\n");
      out.write("                loadProjectsForAssignment();\n");
      out.write("            } else {\n");
      out.write("                alert('Please enter a valid username');\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        async function loadAllProjects() {\n");
      out.write("            try {\n");
      out.write("                const response = await fetch(API_BASE + '/projects');\n");
      out.write("                if (!response.ok) {\n");
      out.write("                    throw new Error('HTTP error! status: ' + response.status);\n");
      out.write("                }\n");
      out.write("                \n");
      out.write("                const projects = await response.json();\n");
      out.write("                allProjectsData = projects;\n");
      out.write("                \n");
      out.write("                const container = document.getElementById('allProjects');\n");
      out.write("                container.innerHTML = '';\n");
      out.write("                \n");
      out.write("                if (projects && projects.length > 0) {\n");
      out.write("                    projects.forEach(project => {\n");
      out.write("                        const projectCard = document.createElement('div');\n");
      out.write("                        projectCard.className = 'project-card';\n");
      out.write("                        \n");
      out.write("                        const projectName = project.name ? String(project.name) : 'Unknown Project';\n");
      out.write("                        const projectId = project.id !== null && project.id !== undefined ? String(project.id) : 'N/A';\n");
      out.write("                        const description = project.description ? String(project.description) : 'No description';\n");
      out.write("                        const managerId = project.projectManagerID !== null && project.projectManagerID !== undefined ? String(project.projectManagerID) : 'Not assigned';\n");
      out.write("                        const managerName = project.managerName ? String(project.managerName) : 'Not assigned';\n");
      out.write("                        const members = project.members ? String(project.members) : 'No members';\n");
      out.write("                        \n");
      out.write("                        projectCard.innerHTML = \n");
      out.write("                            '<h4>🎯 ' + projectName + '</h4>' +\n");
      out.write("                            '<p><strong>ID:</strong> ' + projectId + '</p>' +\n");
      out.write("                            '<p><strong>Description:</strong> ' + description + '</p>' +\n");
      out.write("                            '<p><strong>Project Manager ID:</strong> ' + managerId + '</p>' +\n");
      out.write("                            '<p><strong>Manager:</strong> ' + managerName + '</p>' +\n");
      out.write("                            '<p><strong>Members:</strong> ' + members + '</p>';\n");
      out.write("                        \n");
      out.write("                        container.appendChild(projectCard);\n");
      out.write("                    });\n");
      out.write("                } else {\n");
      out.write("                    container.innerHTML = '<p>No projects found. Please setup the database first.</p>';\n");
      out.write("                }\n");
      out.write("            } catch (error) {\n");
      out.write("                const container = document.getElementById('allProjects');\n");
      out.write("                container.innerHTML = '<p style=\"color: red;\">Error loading projects: ' + error.message + '</p>';\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        async function loadUserProjects() {\n");
      out.write("            if (!currentUser) {\n");
      out.write("                alert('Please set your username first');\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            try {\n");
      out.write("                const response = await fetch(API_BASE + '/projects', {\n");
      out.write("                    method: 'POST',\n");
      out.write("                    headers: {\n");
      out.write("                        'Content-Type': 'application/json',\n");
      out.write("                    },\n");
      out.write("                    body: JSON.stringify({\n");
      out.write("                        action: 'get_user_projects',\n");
      out.write("                        username: currentUser\n");
      out.write("                    })\n");
      out.write("                });\n");
      out.write("                \n");
      out.write("                const projects = await response.json();\n");
      out.write("                const container = document.getElementById('userProjects');\n");
      out.write("                \n");
      out.write("                if (projects.length > 0) {\n");
      out.write("                    container.innerHTML = '<h4>Projects you are a member of:</h4><ul>';\n");
      out.write("                    projects.forEach(project => {\n");
      out.write("                        container.innerHTML += '<li><strong>' + project.name + '</strong></li>';\n");
      out.write("                    });\n");
      out.write("                    container.innerHTML += '</ul>';\n");
      out.write("                } else {\n");
      out.write("                    container.innerHTML = '<p>You are not a member of any projects.</p>';\n");
      out.write("                }\n");
      out.write("            } catch (error) {\n");
      out.write("                alert('Error loading user projects');\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        async function loadProjectsForAssignment() {\n");
      out.write("            try {\n");
      out.write("                const response = await fetch(API_BASE + '/projects');\n");
      out.write("                const projects = await response.json();\n");
      out.write("                \n");
      out.write("                const container = document.getElementById('projectsList');\n");
      out.write("                container.innerHTML = '';\n");
      out.write("                \n");
      out.write("                projects.forEach(project => {\n");
      out.write("                    const checkboxDiv = document.createElement('div');\n");
      out.write("                    checkboxDiv.className = 'checkbox-item';\n");
      out.write("                    checkboxDiv.innerHTML = \n");
      out.write("                        '<input type=\"checkbox\" id=\"project_' + project.id + '\" value=\"' + project.name + '\">' +\n");
      out.write("                        '<label for=\"project_' + project.id + '\">' + project.name + '</label>';\n");
      out.write("                    container.appendChild(checkboxDiv);\n");
      out.write("                });\n");
      out.write("            } catch (error) {\n");
      out.write("                console.error('Error loading projects for assignment:', error);\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        async function assignDeveloper() {\n");
      out.write("            const developerName = document.getElementById('developerName').value.trim();\n");
      out.write("            const newProjectName = document.getElementById('newProjectName').value.trim();\n");
      out.write("            \n");
      out.write("            if (!developerName) {\n");
      out.write("                alert('Please enter a developer name');\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // Get selected projects\n");
      out.write("            const selectedProjects = [];\n");
      out.write("            const checkboxes = document.querySelectorAll('#projectsList input[type=\"checkbox\"]:checked');\n");
      out.write("            checkboxes.forEach(checkbox => {\n");
      out.write("                selectedProjects.push(checkbox.value);\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            // Add new project if specified\n");
      out.write("            if (newProjectName) {\n");
      out.write("                selectedProjects.push(newProjectName);\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (selectedProjects.length === 0) {\n");
      out.write("                alert('Please select at least one project or enter a new project name');\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            try {\n");
      out.write("                const response = await fetch(API_BASE + '/projects', {\n");
      out.write("                    method: 'POST',\n");
      out.write("                    headers: {\n");
      out.write("                        'Content-Type': 'application/json',\n");
      out.write("                    },\n");
      out.write("                    body: JSON.stringify({\n");
      out.write("                        action: 'assign_developer',\n");
      out.write("                        developer: developerName,\n");
      out.write("                        projects: selectedProjects\n");
      out.write("                    })\n");
      out.write("                });\n");
      out.write("                \n");
      out.write("                const result = await response.json();\n");
      out.write("                \n");
      out.write("                if (response.ok) {\n");
      out.write("                    let resultHtml = '<h4>Assignment Results:</h4><ul>';\n");
      out.write("                    result.results.forEach(res => {\n");
      out.write("                        resultHtml += '<li><strong>' + res.project + ':</strong> ' + res.status + '</li>';\n");
      out.write("                    });\n");
      out.write("                    resultHtml += '</ul>';\n");
      out.write("                    document.getElementById('assignResult').innerHTML = resultHtml;\n");
      out.write("                    \n");
      out.write("                    // Clear form\n");
      out.write("                    document.getElementById('developerName').value = '';\n");
      out.write("                    document.getElementById('newProjectName').value = '';\n");
      out.write("                    checkboxes.forEach(checkbox => checkbox.checked = false);\n");
      out.write("                    \n");
      out.write("                    // Reload projects list\n");
      out.write("                    loadProjectsForAssignment();\n");
      out.write("                } else {\n");
      out.write("                    document.getElementById('assignResult').innerHTML = '<p style=\"color: red;\">Error: ' + result.message + '</p>';\n");
      out.write("                }\n");
      out.write("            } catch (error) {\n");
      out.write("                alert('Error assigning developer');\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        async function loadAllDevelopers() {\n");
      out.write("            try {\n");
      out.write("                const response = await fetch(API_BASE + '/developers');\n");
      out.write("                if (!response.ok) {\n");
      out.write("                    throw new Error('HTTP error! status: ' + response.status);\n");
      out.write("                }\n");
      out.write("                \n");
      out.write("                const developers = await response.json();\n");
      out.write("                allDevelopersData = developers;\n");
      out.write("                displayDevelopers(developers);\n");
      out.write("            } catch (error) {\n");
      out.write("                const container = document.getElementById('allDevelopers');\n");
      out.write("                container.innerHTML = '<p style=\"color: red;\">Error loading developers: ' + error.message + '</p>';\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function displayDevelopers(developers) {\n");
      out.write("            const container = document.getElementById('allDevelopers');\n");
      out.write("            container.innerHTML = '';\n");
      out.write("            \n");
      out.write("            if (developers && developers.length > 0) {\n");
      out.write("                developers.forEach(developer => {\n");
      out.write("                    const developerCard = document.createElement('div');\n");
      out.write("                    developerCard.className = 'developer-card';\n");
      out.write("                    \n");
      out.write("                    const devName = developer.name ? String(developer.name) : 'Unknown Developer';\n");
      out.write("                    const devId = developer.id !== null && developer.id !== undefined ? String(developer.id) : 'N/A';\n");
      out.write("                    const devAge = developer.age !== null && developer.age !== undefined && developer.age !== 0 \n");
      out.write("                        ? String(developer.age) \n");
      out.write("                        : 'Not specified';\n");
      out.write("                    const devSkills = developer.skills && String(developer.skills).trim() !== '' \n");
      out.write("                        ? String(developer.skills) \n");
      out.write("                        : 'No skills listed';\n");
      out.write("                    \n");
      out.write("                    developerCard.innerHTML = \n");
      out.write("                        '<h4>👨‍💻 ' + devName + '</h4>' +\n");
      out.write("                        '<p><strong>ID:</strong> ' + devId + '</p>' +\n");
      out.write("                        '<p><strong>Age:</strong> ' + devAge + '</p>' +\n");
      out.write("                        '<p><strong>Skills:</strong> ' + devSkills + '</p>';\n");
      out.write("                    \n");
      out.write("                    container.appendChild(developerCard);\n");
      out.write("                });\n");
      out.write("            } else {\n");
      out.write("                container.innerHTML = '<p>No developers found.</p>';\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function filterDevelopersBySkill() {\n");
      out.write("            const skill = document.getElementById('skillFilter').value.trim().toLowerCase();\n");
      out.write("            if (!skill) {\n");
      out.write("                alert('Please enter a skill to filter by');\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            const filteredDevelopers = allDevelopersData.filter(developer => \n");
      out.write("                developer.skills && developer.skills.toLowerCase().includes(skill)\n");
      out.write("            );\n");
      out.write("\n");
      out.write("            displayDevelopers(filteredDevelopers);\n");
      out.write("            \n");
      out.write("            if (filteredDevelopers.length === 0) {\n");
      out.write("                document.getElementById('allDevelopers').innerHTML = \n");
      out.write("                    '<p>No developers found with skill: <strong>' + skill + '</strong></p>';\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function showAllDevelopers() {\n");
      out.write("            displayDevelopers(allDevelopersData);\n");
      out.write("            document.getElementById('skillFilter').value = '';\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // Load initial data when page loads\n");
      out.write("        window.onload = function() {\n");
      out.write("            // Application ready\n");
      out.write("        };\n");
      out.write("    </script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
